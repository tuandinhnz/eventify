{"version":3,"sources":["app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/layout/NavBar.tsx","app/layout/LoadingComponent.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationError.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","app/layout/App.tsx","reportWebVitals.ts","index.tsx"],"names":["axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","error","data","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","details","id","create","activity","update","attend","Account","current","login","user","register","Activity","init","Object","assign","this","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","username","displayName","image","ActivityStore","activityRegistry","Map","isLoading","selectedActivity","editMode","loadingInitial","loadActivities","setLoadingInitial","forEach","setActivity","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","set","state","setIsLoading","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","makeAutoObservable","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","UserStore","creds","setToken","setUser","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","activityStore","getItem","appLoaded","setAppLoaded","reaction","setItem","modal","open","openModal","content","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","exact","to","header","src","alt","style","marginRight","MenuItem","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","LoadingComponent","Dimmer","active","Loader","vertical","size","width","marginTop","Header","attached","color","List","horizontal","map","circular","ActivityListItem","Segment","Group","Label","textAlign","site","Content","Description","basic","Icon","secondary","clearing","floated","groupedActivities","group","sub","useEffect","Grid","Column","MyTextInput","props","useField","field","meta","Form","Field","touched","label","useState","email","password","userFormValues","initialValues","onSubmit","setErrors","setSubmitting","catch","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","marginBottom","loading","fluid","ValidationError","Message","err","i","validationSchema","Yup","required","isValid","dirty","disabled","isLoggedIn","MyTextArea","MySelectInput","helpers","Select","clearable","options","value","onChange","e","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","shape","nullable","useParams","useHistory","React","enableReinitialize","uuid","handleFormSubmit","placeholderText","showTimeSelect","timeCaption","dateFormat","rows","border","Comment","Avatar","Author","Metadata","Text","Actions","Action","reply","TextArea","labelPosition","primary","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","length","relaxed","divided","verticalAlign","Extra","TestErrors","widths","baseUrl","NotFound","Inline","message","Modal","onClose","location","useLocation","finally","hideProgressBar","path","component","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ServerError","LoginForm","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"+ZAgBAA,IAAMC,SAASC,QAAUC,OAIzBH,IAAMI,aAAaC,QAAQC,KAAI,SAACC,GAC9B,IAAMC,EAAQC,EAAMC,YAAYF,MAEhC,OADIA,IAAOD,EAAOI,QAAQC,cAAf,iBAAyCJ,IAC7CD,KAITP,IAAMI,aAAaS,SAASP,IAA5B,+BAAAQ,EAAA,MACE,WAAOD,GAAP,SAAAC,EAAA,qGAISD,GAJT,2CADF,uDAOE,SAACE,GACC,MAAiCA,EAAMF,SAA/BG,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OAAQV,EAAtB,EAAsBA,OACtB,OAAQU,GACN,KAAK,IAOH,GANoB,kBAATD,GACTE,IAAMH,MAAMC,GAEQ,QAAlBT,EAAOY,QAAoBH,EAAKI,OAAOC,eAAe,OACxDC,GAAQC,KAAK,cAEXP,EAAKI,OAAQ,CACf,IAAMI,EAAmB,GACzB,IAAK,IAAMC,KAAOT,EAAKI,OACjBJ,EAAKI,OAAOK,IACdD,EAAiBD,KAAKP,EAAKI,OAAOK,IAGtC,MAAMD,EAAiBE,OAEzB,MACF,KAAK,IACHR,IAAMH,MAAM,gBACZ,MACF,KAAK,IACHG,IAAMH,MAAM,aACZO,GAAQC,KAAK,cACb,MACF,KAAK,IACHd,EAAMC,YAAYiB,eAAeX,GACjCM,GAAQC,KAAK,iBACbL,IAAMH,MAAM,gBAGhB,OAAOa,QAAQC,OAAOd,MAK1B,IAAMe,EAAe,SAAIjB,GAAJ,OAAmCA,EAASG,MAG3De,EACC,SAAIC,GAAJ,OAAoBhC,IAAMiC,IAAOD,GAAKE,KAAKJ,IAD5CC,EAEE,SAAIC,EAAaG,GAAjB,OAA8BnC,IAAMoC,KAAQJ,EAAKG,GAAMD,KAAKJ,IAF9DC,EAGC,SAAIC,EAAaG,GAAjB,OAA8BnC,IAAMqC,IAAOL,EAAKG,GAAMD,KAAKJ,IAH5DC,EAII,SAAIC,GAAJ,OAAoBhC,IAAMsC,OAAUN,GAAKE,KAAKJ,IAwBzCS,EALD,CACZC,WAhBiB,CACjBC,KAAM,kBAAMV,EAAyB,gBACrCW,QAAS,SAACC,GAAD,OAAgBZ,EAAA,sBAAsCY,KAC/DC,OAAQ,SAACC,GAAD,OAAkCd,EAAoB,cAAec,IAC7EC,OAAQ,SAACD,GAAD,OAAkCd,EAAA,qBAAiCc,EAASF,IAAME,IAC1FP,OAAQ,SAACK,GAAD,OAAgBZ,EAAA,sBAAqCY,KAC7DI,OAAQ,SAACJ,GAAD,OAAgBZ,EAAA,sBAAmCY,EAAnC,WAAgD,MAWxEK,QARc,CACdC,QAAS,kBAAMlB,EAAmB,aAClCmB,MAAO,SAACC,GAAD,OAAyBpB,EAAoB,iBAAkBoB,IACtEC,SAAU,SAACD,GAAD,OAAyBpB,EAAoB,oBAAqBoB,MC7EjEE,EACX,WAAYC,GAA4B,oBACtCC,OAAOC,OAAOC,KAAMH,IAIXI,EASX,WAAYb,GAAgC,yBAR5CF,QAAcgB,EAQ6B,KAP3CC,MAAgB,GAO2B,KAN3CC,SAAmB,GAMwB,KAL3CC,YAAsB,GAKqB,KAJ3CC,KAAoB,KAIuB,KAH3CC,KAAe,GAG4B,KAF3CC,MAAgB,GAGVpB,IACFY,KAAKd,GAAKE,EAASF,GACnBc,KAAKG,MAAQf,EAASe,MACtBH,KAAKI,SAAWhB,EAASgB,SACzBJ,KAAKK,YAAcjB,EAASiB,YAC5BL,KAAKM,KAAOlB,EAASkB,KACrBN,KAAKQ,MAAQpB,EAASoB,MACtBR,KAAKO,KAAOnB,EAASmB,O,SChCdE,EACX,WAAYf,GAAa,oBACvBM,KAAKU,SAAWhB,EAAKgB,SACrBV,KAAKW,YAAcjB,EAAKiB,YACxBX,KAAKY,MAAQlB,EAAKkB,OCNDC,E,WAOnB,aAAe,IAAD,gCANdC,iBAAmB,IAAIC,IAMT,KALdC,WAAqB,EAKP,KAJdC,sBAAyCf,EAI3B,KAHdgB,UAAoB,EAGN,KAFdC,gBAA0B,EAEZ,KAoBdC,eApBc,sBAoBG,sBAAA/D,EAAA,6DACf,EAAKgE,mBAAkB,GADR,kBAGYvC,EAAMC,WAAWC,OAH7B,cAIFsC,SAAQ,SAAClC,GAClB,EAAKmC,YAAYnC,MAEnB,EAAKiC,mBAAkB,GAPV,gDASbG,QAAQC,IAAR,MACA,EAAKJ,mBAAkB,GAVV,yDApBH,KAkCdK,aAlCc,uCAkCC,WAAOxC,GAAP,eAAA7B,EAAA,2DAET+B,EAAW,EAAKuC,YAAYzC,IAFnB,uBAKX,EAAK+B,iBAAmB7B,EALb,kBAMJA,GANI,cAQX,EAAKiC,mBAAkB,GARZ,mBAUQvC,EAAMC,WAAWE,QAAQC,GAVjC,eAUTE,EAVS,OAWT,EAAKmC,YAAYnC,GACjBwC,aAAY,WACV,EAAKX,iBAAmB7B,KAE1B,EAAKiC,mBAAkB,GAfd,kBAgBFjC,GAhBE,kCAkBToC,QAAQC,IAAR,MACA,EAAKJ,mBAAkB,GAnBd,0DAlCD,2DA2DNM,YAAc,SAACzC,GACrB,OAAO,EAAK4B,iBAAiBtC,IAAIU,IA5DrB,KA+DNqC,YAAc,SAACnC,GACrB,IACU,EADJM,EAAO1C,EAAM6E,UAAUnC,KACzBA,IAEFN,EAAS0C,QAAU1C,EAAS2C,UAAWC,MAAK,SAAC3E,GAAD,OAAOA,EAAEqD,WAAahB,EAAKgB,YAEvEtB,EAAS6C,OAAS7C,EAAS8C,eAAiBxC,EAAKgB,SAEjDtB,EAAS+C,KAAT,UAAgB/C,EAAS2C,iBAAzB,aAAgB,EAAoBK,MAAK,SAACC,GAAD,OAAOA,EAAE3B,WAAatB,EAAS8C,iBAE1E9C,EAASkB,KAAO,IAAIgC,KAAKlD,EAASkB,MAGlC,EAAKQ,iBAAiByB,IAAInD,EAASF,GAAIE,IA5E3B,KA+EdiC,kBAAoB,SAACmB,GACnB,EAAKrB,eAAiBqB,GAhFV,KAmFdC,aAAe,SAACD,GACd,EAAKxB,UAAYwB,GApFL,KAuFdE,eAvFc,uCAuFG,WAAOtD,GAAP,mBAAA/B,EAAA,6DACTqC,EAAO1C,EAAM6E,UAAUnC,KACvBiD,EAAW,IAAIlC,EAAQf,GAFd,kBAIPZ,EAAMC,WAAWI,OAAOC,GAJjB,QAKPwD,EAAc,IAAIhD,EAASR,IACrB8C,aAAexC,EAAMgB,SACjCkC,EAAYb,UAAY,CAACY,GACzB,EAAKpB,YAAYqB,GACjBhB,aAAY,WACV,EAAKX,iBAAmB2B,KAVb,kDAabpB,QAAQC,IAAR,MAba,0DAvFH,2DAwGdoB,eAxGc,uCAwGG,WAAOzD,GAAP,SAAA/B,EAAA,+EAEPyB,EAAMC,WAAWM,OAAOD,GAFjB,OAGbwC,aAAY,WACV,GAAIxC,EAASF,GAAI,CACf,IAAI4D,EAAe,2BAAQ,EAAKnB,YAAYvC,EAASF,KAAQE,GAC7D,EAAK0B,iBAAiByB,IAAInD,EAASF,GAAI4D,GAEvC,EAAK7B,iBAAmB6B,MARf,+CAYbtB,QAAQC,IAAR,MAZa,wDAxGH,2DAwHdsB,eAxHc,uCAwHG,WAAO7D,GAAP,SAAA7B,EAAA,6DACf,EAAKoF,cAAa,GADH,kBAGP3D,EAAMC,WAAWF,OAAOK,GAHjB,OAIb0C,aAAY,WACV,EAAKd,iBAAiBjC,OAAOK,GAC7B,EAAKuD,cAAa,MAEpB,EAAKA,cAAa,GARL,gDAUbjB,QAAQC,IAAR,MACA,EAAKgB,cAAa,GAXL,yDAxHH,2DAuIdO,iBAvIc,sBAuIK,4BAAA3F,EAAA,6DACXqC,EAAO1C,EAAM6E,UAAUnC,KAC7B,EAAKsB,WAAY,EAFA,kBAITlC,EAAMC,WAAWO,OAAO,EAAK2B,iBAAkB/B,IAJtC,OAKf0C,aAAY,WAAO,IAAD,EAChB,aAAI,EAAKX,wBAAT,aAAI,EAAuBa,QAAS,CAAC,IAAD,EAElC,EAAKb,iBAAiBc,UAAtB,UAAkC,EAAKd,iBAAiBc,iBAAxD,aAAkC,EAAiCkB,QAAO,SAAC5F,GAAD,OAAOA,EAAEqD,YAAF,OAAehB,QAAf,IAAeA,OAAf,EAAeA,EAAMgB,aACtG,EAAKO,iBAAiBa,SAAU,MAC3B,CAAC,IAAD,IAECa,EAAW,IAAIlC,EAAQf,GAC7B,YAAKuB,wBAAL,mBAAuBc,iBAAvB,SAAkCjE,KAAK6E,GACvC,EAAK1B,iBAAkBa,SAAU,EAEnC,EAAKhB,iBAAiByB,IAAI,EAAKtB,iBAAkB/B,GAAI,EAAK+B,qBAhB7C,gDAmBfO,QAAQC,IAAR,MAnBe,yBAqBfG,aAAY,kBAAO,EAAKZ,WAAY,KArBrB,4EAvIL,KAgKdkC,qBAhKc,sBAgKS,sBAAA7F,EAAA,6DACrB,EAAK2D,WAAY,EADI,kBAGblC,EAAMC,WAAWO,OAAO,EAAK2B,iBAAkB/B,IAHlC,OAInB0C,aAAY,WAAO,IAAD,EAChB,EAAKX,iBAAkBkC,cAAc,UAAC,EAAKlC,wBAAN,aAAC,EAAuBkC,aAC7D,EAAKrC,iBAAiByB,IAAI,EAAKtB,iBAAkB/B,GAAI,EAAK+B,qBANzC,gDASnBO,QAAQC,IAAR,MATmB,yBAWnBG,aAAY,kBAAO,EAAKZ,WAAY,KAXjB,4EA/JrBoC,YAAmBpD,M,kDAIrB,WACE,OAAOqD,MAAMC,KAAKtD,KAAKc,iBAAiByC,UAAUC,MAAK,SAACnG,EAAGoG,GAAJ,OAAUpG,EAAEiD,KAAMoD,UAAYD,EAAEnD,KAAMoD,e,6BAI/F,WACE,OAAO5D,OAAO6D,QACZ3D,KAAK4D,iBAAiBC,QAAO,SAACC,EAAY1E,GACxC,IAAMkB,EAAOyD,kBAAO3E,EAASkB,KAAO,eAEpC,OADAwD,EAAWxD,GAAQwD,EAAWxD,GAAX,sBAAuBwD,EAAWxD,IAAlC,CAAyClB,IAAY,CAACA,GAClE0E,IACN,S,KCvBYE,E,WAEnB,aAAe,IAAD,gCADdtE,KAAoB,KACN,KAQdD,MARc,uCAQN,WAAOwE,GAAP,eAAA5G,EAAA,+EAEeyB,EAAMS,QAAQE,MAAMwE,GAFnC,OAEEvE,EAFF,OAGJ1C,EAAMC,YAAYiH,SAASxE,EAAK3C,OAChCyE,QAAQC,IAAI/B,GACZ,EAAKyE,QAAQzE,GAEb7B,GAAQC,KAAK,eAEbd,EAAMoH,WAAWC,aATb,uHARM,2DAwBd1E,SAxBc,uCAwBH,WAAOsE,GAAP,eAAA5G,EAAA,+EAEYyB,EAAMS,QAAQI,SAASsE,GAFnC,OAEDvE,EAFC,OAGP1C,EAAMC,YAAYiH,SAASxE,EAAK3C,OAChCyE,QAAQC,IAAI/B,GACZ,EAAKyE,QAAQzE,GAEb7B,GAAQC,KAAK,eAEbd,EAAMoH,WAAWC,aATV,uHAxBG,2DAuCdC,OAAS,WACPtH,EAAMC,YAAYiH,SAAS,MAC3BK,OAAOC,aAAaC,WAAW,OAC/B,EAAKN,QAAQ,MACbtG,GAAQC,KAAK,MA3CD,KA8CdqG,QAAU,SAACzE,GACT,EAAKA,KAAOA,GA/CA,KAkDdgF,QAlDc,sBAkDJ,4BAAArH,EAAA,+EAEayB,EAAMS,QAAQC,UAF3B,OAEAE,EAFA,OAGN,EAAKyE,QAAQzE,GAHP,gDAKN8B,QAAQC,IAAR,MALM,yDAjDR2B,YAAmBpD,M,4CAGrB,WACE,QAASA,KAAKN,S,KCFL1C,EAAe,CAC1B2H,cAAe,IAAI9D,EACnB5D,YAAa,ICNb,aAAe,IAAD,gCAJdK,MAA4B,KAId,KAHdP,MAAuBwH,OAAOC,aAAaI,QAAQ,OAGrC,KAFdC,WAAY,EAEE,KAcd3G,eAAiB,SAACZ,GAChB,EAAKA,MAAQA,GAfD,KAkBd4G,SAAW,SAACnH,GACV,EAAKA,MAAQA,GAnBD,KAsBd+H,aAAe,WACb,EAAKD,WAAY,GAtBjBzB,YAAmBpD,MAEnB+E,aAEE,kBAAM,EAAKhI,SACX,SAACA,GACKA,EACFwH,OAAOC,aAAaQ,QAAQ,MAAOjI,GAC9BwH,OAAOC,aAAaC,WAAW,WDF5C5C,UAAW,IAAImC,EACfI,WAAY,IEHZ,aAAe,IAAD,gCALda,MAAe,CACbC,MAAM,EACNxG,KAAM,MAGM,KAIdyG,UAAY,SAACC,GACX,EAAKH,MAAMC,MAAO,EAClB,EAAKD,MAAMvG,KAAO0G,GANN,KASdf,WAAa,WACX,EAAKY,MAAMC,MAAO,EAClB,EAAKD,MAAMvG,KAAO,MAVlB0E,YAAmBpD,QFKVqF,EAAeC,wBAActI,GAEnC,SAASuI,IACd,OAAOC,qBAAWH,G,WGaLI,eA7BA,WACb,IAAQ5D,EAAc0D,IAAd1D,UACAnC,EAAiBmC,EAAjBnC,KAAM4E,EAAWzC,EAAXyC,OACd,OACE,cAACoB,EAAA,EAAD,CAAMC,UAAQ,EAACC,MAAM,MAArB,SACE,eAACC,EAAA,EAAD,WACE,eAACH,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,OAAK,EAACC,GAAG,IAAIC,QAAM,EAA3C,UACE,qBAAKC,IAAI,mBAAmBC,IAAI,OAAOC,MAAO,CAAEC,YAAa,UAD/D,cAIA,cAACC,EAAA,EAAD,CAAUT,GAAIC,IAASS,KAAK,aAAaP,GAAG,gBAC5C,cAACM,EAAA,EAAD,CAAUT,GAAIC,IAASS,KAAK,SAASP,GAAG,YACxC,cAACR,EAAA,EAAKI,KAAN,UACE,cAACY,EAAA,EAAD,CAAQX,GAAIC,IAASE,GAAG,kBAAkBS,UAAQ,EAACvB,QAAQ,sBAE7D,eAACM,EAAA,EAAKI,KAAN,CAAWc,SAAS,QAApB,UACE,cAACC,EAAA,EAAD,CAAOT,KAAS,OAAJ1G,QAAI,IAAJA,OAAA,EAAAA,EAAMkB,QAAS,mBAAoBkG,QAAM,EAACC,OAAO,UAC7D,cAACC,EAAA,EAAD,CAAUC,SAAS,WAAWC,KAAI,OAAExH,QAAF,IAAEA,OAAF,EAAEA,EAAMiB,YAA1C,SACE,eAACqG,EAAA,EAAStB,KAAV,WACE,cAACsB,EAAA,EAASlB,KAAV,CAAeC,GAAIoB,IAAMjB,GAAE,0BAAcxG,QAAd,IAAcA,OAAd,EAAcA,EAAMgB,UAAYwG,KAAK,aAAaE,KAAK,SAClF,cAACJ,EAAA,EAASlB,KAAV,CAAeuB,QAAS/C,EAAQ4C,KAAK,SAASE,KAAK,0B,2BCZlDE,EAPU,SAAC,GAAwD,IAAD,IAArD3B,gBAAqD,aAApCP,eAAoC,MAA1B,aAA0B,EAC/E,OACE,cAACmC,EAAA,EAAD,CAAQC,QAAQ,EAAM7B,SAAUA,EAAhC,SACE,cAAC8B,EAAA,EAAD,CAAQrC,QAASA,O,kBCURK,eAfS,WACtB,OACE,qCACE,eAACC,EAAA,EAAD,CAAMgC,UAAQ,EAACC,KAAK,QAAQrB,MAAO,CAAEsB,MAAO,OAAQC,UAAW,IAA/D,UACE,cAACC,EAAA,EAAD,CAAQV,KAAK,SAASW,UAAQ,EAACC,MAAM,OAAO5C,QAAQ,YACpD,cAACM,EAAA,EAAKI,KAAN,CAAWV,QAAQ,mBACnB,cAACM,EAAA,EAAKI,KAAN,CAAWV,QAAQ,eACnB,cAACM,EAAA,EAAKI,KAAN,CAAWV,QAAQ,oBAErB,cAAC0C,EAAA,EAAD,IACA,cAAC,IAAD,U,sDCeSrC,gBApBkB,SAAC,GAA0B,IAAxB1D,EAAuB,EAAvBA,UAClC,OACE,cAACkG,GAAA,EAAD,CAAMC,YAAU,EAAhB,SACGnG,EAAUoG,KAAI,SAACxF,GAAD,OACb,cAACsF,GAAA,EAAKnC,KAAN,CAEEC,GAAIoB,IACJjB,GAAE,oBAAevD,EAASjC,UAH5B,SAKE,cAACmG,EAAA,EAAD,CACEc,KAAK,OACLS,UAAQ,EACRhC,IAAKzD,EAAS/B,OAAS,sBAPpB+B,EAASjC,kBC8CT2H,GAlDU,SAAC,GAAyB,IAAD,EAAtBjJ,EAAsB,EAAtBA,SAC1B,OACE,eAACkJ,EAAA,EAAQC,MAAT,WACE,eAACD,EAAA,EAAD,WACGlJ,EAAS+D,aAAe,cAACqF,EAAA,EAAD,CAAOT,SAAS,MAAMC,MAAM,MAAM5C,QAAQ,YAAYkB,MAAO,CAAEmC,UAAW,YACnG,cAAC3C,EAAA,EAAKyC,MAAN,UACE,eAACzC,EAAA,EAAD,WACE,cAACA,EAAA,EAAKe,MAAN,CAAY6B,KAAK,OAAON,UAAQ,EAAChC,IAAI,qBACrC,eAACN,EAAA,EAAK6C,QAAN,WACE,cAAC7C,EAAA,EAAKgC,OAAN,CAAa/B,GAAIoB,IAAMjB,GAAE,sBAAiB9G,EAASF,IAAnD,SACGE,EAASe,QAEZ,eAAC2F,EAAA,EAAK8C,YAAN,kCAA6BxJ,EAAS+C,YAAtC,aAA6B,EAAezB,YAC3CtB,EAAS6C,QACR,cAAC6D,EAAA,EAAK8C,YAAN,UACE,cAACJ,EAAA,EAAD,CAAOK,OAAK,EAACb,MAAM,SAAnB,6CAKH5I,EAAS0C,UAAY1C,EAAS6C,QAC7B,cAAC6D,EAAA,EAAK8C,YAAN,UACE,cAACJ,EAAA,EAAD,CAAOK,OAAK,EAACb,MAAM,QAAnB,sDASZ,cAACM,EAAA,EAAD,UACE,iCACE,cAACQ,GAAA,EAAD,CAAMrC,KAAK,UACV1C,kBAAO3E,EAASkB,KAAO,uBACxB,cAACwI,GAAA,EAAD,CAAMrC,KAAK,WACVrH,EAASoB,WAGd,cAAC8H,EAAA,EAAD,CAASS,WAAS,EAAlB,SACE,cAAC,GAAD,CAA0BhH,UAAW3C,EAAS2C,cAEhD,eAACuG,EAAA,EAAD,CAASU,UAAQ,EAAjB,UACE,+BAAO5J,EAASiB,cAChB,cAACqG,EAAA,EAAD,CAAQX,GAAIoB,IAAMjB,GAAE,sBAAiB9G,EAASF,IAAM8I,MAAM,OAAOiB,QAAQ,QAAQ7D,QAAQ,gBC5BlFK,gBApBM,WACnB,IACQyD,EADkB3D,IAAlBZ,cACAuE,kBAER,OACE,mCACGA,EAAkBf,KAAI,mCAAEgB,EAAF,KAASrF,EAAT,YACrB,eAAC,WAAD,WACE,cAACgE,EAAA,EAAD,CAAQsB,KAAG,EAACpB,MAAM,OAAlB,SACGmB,IAEFrF,EAAWqE,KAAI,SAAC/I,GAAD,OACd,cAAC,GAAD,CAAoCA,SAAUA,GAAvBA,EAASF,SALrBiK,WCoBR1D,gBA1BW,WACxB,IAAQd,EAAkBY,IAAlBZ,cACAvD,EAAqDuD,EAArDvD,eAAgBN,EAAqC6D,EAArC7D,iBAAkBK,EAAmBwD,EAAnBxD,eAU1C,OANAkI,qBAAU,WAGJvI,EAAiB6G,MAAQ,GAAGvG,MAC/B,CAACA,EAAgBN,EAAiB6G,OAEjCxG,EAAuB,cAAC,EAAD,CAAkBiE,QAAQ,uBAGnD,eAACkE,EAAA,EAAD,WACE,cAACA,EAAA,EAAKC,OAAN,CAAa3B,MAAM,KAAnB,SACE,cAAC,GAAD,MAEF,cAAC0B,EAAA,EAAKC,OAAN,CAAa3B,MAAM,IAAnB,SACE,cAAC,EAAD,Y,mBCFO4B,GAfK,SAACC,GACnB,MAAsBC,aAASD,EAAMhD,MAArC,mBAAOkD,EAAP,KAAcC,EAAd,KACA,OACE,eAACC,GAAA,EAAKC,MAAN,CAAYxM,MAAOsM,EAAKG,WAAaH,EAAKtM,MAA1C,UACE,gCAAQmM,EAAMO,QACd,iDAAWL,GAAWF,IACrBG,EAAKG,SAAWH,EAAKtM,MACpB,cAACkL,EAAA,EAAD,CAAOK,OAAK,EAACb,MAAM,MAAnB,SACG4B,EAAKtM,QAEN,SCoBKmI,gBAlCG,WAChB,IACQhG,EADc8F,IAAd1D,UACApC,MAER,EAAyBwK,mBAAS,CAChCC,MAAO,GACPC,SAAU,GACV7M,MAAO,OAHF8M,EAAP,oBAMA,OACE,cAAC,KAAD,CACEC,cAAeD,EACfE,SAAU,SAAC/G,EAAD,GAA2C,IAAhCgH,EAA+B,EAA/BA,UAAWC,EAAoB,EAApBA,cAC9B/K,EAAM8D,GACH9E,MAAK,kBAAM+L,GAAc,MACzBC,OAAM,SAACnN,GACNiN,EAAU,CAAEjN,MAAO,8BACnBkN,GAAc,OAPtB,SAUG,gBAAGE,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAAchN,EAA/B,EAA+BA,OAA/B,OACC,eAAC,KAAD,CAAMiN,UAAU,UAAUN,SAAUI,EAAcG,aAAa,MAA/D,UACE,cAAC/C,EAAA,EAAD,CAAQ/B,GAAG,KAAKX,QAAQ,oBAAoB4C,MAAM,OAAOS,UAAU,WACnE,cAAC,GAAD,CAAahC,KAAK,QAAQqE,YAAY,UACtC,cAAC,GAAD,CAAarE,KAAK,WAAWqE,YAAY,WAAWC,KAAK,aACzD,cAAC,KAAD,CAActE,KAAK,QAAQuE,OAAQ,kBAAM,cAACxC,EAAA,EAAD,CAAOlC,MAAO,CAAE2E,aAAc,IAAMpC,OAAK,EAACb,MAAM,MAAM5C,QAASzH,EAAOL,WAC/G,cAACoJ,EAAA,EAAD,CAAQwE,QAASP,EAAchE,UAAQ,EAACvB,QAAQ,QAAQ2F,KAAK,SAASI,OAAK,a,mBCftEC,GAdS,SAAC,GAAuB,IAArBzN,EAAoB,EAApBA,OACzB,OACE,cAAC0N,GAAA,EAAD,CAAS/N,OAAK,EAAd,SACGK,GACC,cAAC0N,GAAA,EAAQpD,KAAT,UACGtK,EAAOwK,KAAI,SAACmD,EAAUC,GAAX,OACV,cAACF,GAAA,EAAQvF,KAAT,UAAuBwF,GAAJC,WC0ChB9F,gBA5CM,WACnB,IACQ9F,EADc4F,IAAd1D,UACAlC,SAER,EAAyBsK,mBAAS,CAChCC,MAAO,GACPC,SAAU,GACVxJ,YAAa,GACbD,SAAU,GACVpD,MAAO,OALF8M,EAAP,oBAQA,OACE,cAAC,KAAD,CACEC,cAAeD,EACfE,SAAU,SAAC/G,EAAD,GAA2C,IAAhCgH,EAA+B,EAA/BA,UAAWC,EAAoB,EAApBA,cAC9B7K,EAAS4D,GACN9E,MAAK,kBAAM+L,GAAc,MACzBC,OAAM,SAACnN,GACNiN,EAAU,CAAEjN,UACZkN,GAAc,OAGpBgB,iBAAkBC,KAAW,CAC3B9K,YAAa8K,OAAaC,WAC1BhL,SAAU+K,OAAaC,WACvBxB,MAAOuB,OAAaC,WAAWxB,QAC/BC,SAAUsB,OAAaC,aAd3B,SAgBG,gBAAGhB,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAAchN,EAA/B,EAA+BA,OAAQgO,EAAvC,EAAuCA,QAASC,EAAhD,EAAgDA,MAAhD,OACC,eAAC,KAAD,CAAMhB,UAAU,gBAAgBN,SAAUI,EAAcG,aAAa,MAArE,UACE,cAAC/C,EAAA,EAAD,CAAQ/B,GAAG,KAAKX,QAAQ,sBAAsB4C,MAAM,OAAOS,UAAU,WACrE,cAAC,GAAD,CAAahC,KAAK,cAAcqE,YAAY,iBAC5C,cAAC,GAAD,CAAarE,KAAK,WAAWqE,YAAY,aACzC,cAAC,GAAD,CAAarE,KAAK,QAAQqE,YAAY,UACtC,cAAC,GAAD,CAAarE,KAAK,WAAWqE,YAAY,WAAWC,KAAK,aACzD,cAAC,KAAD,CAActE,KAAK,QAAQuE,OAAQ,kBAAM,cAAC,GAAD,CAAiBrN,OAAQA,EAAOL,WACzE,cAACoJ,EAAA,EAAD,CAAQmF,UAAWF,IAAYC,GAASjB,EAAcO,QAASP,EAAchE,UAAQ,EAACvB,QAAQ,SAAS2F,KAAK,SAASI,OAAK,aCJrH1F,gBAlCE,WACf,MAAkCF,IAA1B1D,EAAR,EAAQA,UAAWuC,EAAnB,EAAmBA,WACX0H,EAAejK,EAAfiK,WACA3G,EAAcf,EAAde,UAER,OACE,cAACmD,EAAA,EAAD,CAAS3C,UAAQ,EAAC8C,UAAU,SAASf,UAAQ,EAACkD,UAAU,WAAxD,SACE,eAAC/E,EAAA,EAAD,CAAWqB,MAAI,EAAf,UACE,eAACY,EAAA,EAAD,CAAQ/B,GAAG,KAAKJ,UAAQ,EAAxB,UACE,cAACkB,EAAA,EAAD,CAAOc,KAAK,UAAUvB,IAAI,mBAAmBC,IAAI,OAAOC,MAAO,CAAE2E,aAAc,MADjF,cAICa,EACC,qCACE,cAAChE,EAAA,EAAD,CAAQ/B,GAAG,KAAKJ,UAAQ,EAACP,QAAQ,wBACjC,cAACsB,EAAA,EAAD,CAAQX,GAAIoB,IAAMjB,GAAG,cAAcyB,KAAK,OAAOhC,UAAQ,EAAvD,sCAKF,qCACE,cAACe,EAAA,EAAD,CAAQW,QAAS,kBAAMlC,EAAU,cAAC,GAAD,MAAgBwC,KAAK,OAAOhC,UAAQ,EAArE,mBAGA,cAACe,EAAA,EAAD,CAAQW,QAAS,kBAAMlC,EAAU,cAAC,GAAD,MAAmBwC,KAAK,OAAOhC,UAAQ,EAAxE,iC,UCNGoG,GAfI,SAACtC,GAClB,MAAsBC,aAASD,EAAMhD,MAArC,mBAAOkD,EAAP,KAAcC,EAAd,KACA,OACE,eAACC,GAAA,EAAKC,MAAN,CAAYxM,MAAOsM,EAAKG,WAAaH,EAAKtM,MAA1C,UACE,gCAAQmM,EAAMO,QACd,oDAAcL,GAAWF,IACxBG,EAAKG,SAAWH,EAAKtM,MACpB,cAACkL,EAAA,EAAD,CAAOK,OAAK,EAACb,MAAM,MAAnB,SACG4B,EAAKtM,QAEN,S,UCYK0O,GAtBO,SAACvC,GACrB,MAA+BC,aAASD,EAAMhD,MAA9C,mBAAOkD,EAAP,KAAcC,EAAd,KAAoBqC,EAApB,KACA,OACE,eAACpC,GAAA,EAAKC,MAAN,CAAYxM,MAAOsM,EAAKG,WAAaH,EAAKtM,MAA1C,UACE,gCAAQmM,EAAMO,QACd,cAACkC,GAAA,EAAD,CACEC,WAAS,EACTC,QAAS3C,EAAM2C,QACfC,MAAO1C,EAAM0C,OAAS,KACtBC,SAAU,SAACC,EAAGC,GAAJ,OAAUP,EAAQQ,SAASD,EAAEH,QACvCK,OAAQ,kBAAMT,EAAQU,YAAW,IACjC7B,YAAarB,EAAMqB,cAEpBlB,EAAKG,SAAWH,EAAKtM,MACpB,cAACkL,EAAA,EAAD,CAAOK,OAAK,EAACb,MAAM,MAAnB,SACG4B,EAAKtM,QAEN,SC5BGsP,GAAkB,CAC7B,CAAE1F,KAAM,SAAUmF,MAAO,UACzB,CAAEnF,KAAM,UAAWmF,MAAO,WAC1B,CAAEnF,KAAM,OAAQmF,MAAO,QACvB,CAAEnF,KAAM,OAAQmF,MAAO,QACvB,CAAEnF,KAAM,QAASmF,MAAO,SACxB,CAAEnF,KAAM,SAAUmF,MAAO,W,qBCaZQ,GAdK,SAACpD,GACnB,MAA+BC,aAASD,EAAMhD,MAA9C,mBAAOkD,EAAP,KAAcC,EAAd,KAAoBqC,EAApB,KACA,OACE,eAACpC,GAAA,EAAKC,MAAN,CAAYxM,MAAOsM,EAAKG,WAAaH,EAAKtM,MAA1C,UACE,cAAC,KAAD,uCAAgBqM,GAAWF,GAA3B,IAAkCqD,SAAWnD,EAAM0C,OAAS,IAAI/J,KAAKqH,EAAM0C,QAAW,KAAMC,SAAU,SAACD,GAAD,OAAWJ,EAAQQ,SAASJ,OACjIzC,EAAKG,SAAWH,EAAKtM,MACpB,cAACkL,EAAA,EAAD,CAAOK,OAAK,EAACb,MAAM,MAAnB,SACG4B,EAAKtM,QAEN,SCQJkO,GAAmBC,OAAasB,MAAM,CAC1C5M,MAAOsL,OAAaC,SAAS,kCAC7BpL,KAAMmL,OAAaC,SAAS,oBAAoBsB,WAChD3M,YAAaoL,OAAaC,SAAS,wCACnCtL,SAAUqL,OAAaC,WACvBnL,KAAMkL,OAAaC,WACnBlL,MAAOiL,OAAaC,aA2DPjG,gBAxDM,WACnB,IAAQd,EAAkBY,IAAlBZ,cACW9B,GAAoF8B,EAA/F3D,UAA+F2D,EAApF9B,gBAAgBH,EAAoEiC,EAApEjC,eAAgBhB,EAAoDiD,EAApDjD,aAAcP,EAAsCwD,EAAtCxD,eAAgBE,EAAsBsD,EAAtBtD,kBACzEnC,EAAO+N,cAAP/N,GACFrB,EAAUqP,cAEhB,EAAgCC,WAAmC,IAAIlN,GAAvE,mBAAOb,EAAP,KAAiBmC,EAAjB,KAEA8H,qBAAU,WACJnK,EACFwC,EAAaxC,GAAIT,MAAK,SAACW,GACrBmC,EAAY,IAAItB,EAAmBb,OAGrCiC,GAAkB,KAEnB,CAACnC,EAAIwC,EAAcL,IAgBtB,OAAIF,EAAuB,cAAC,EAAD,CAAkBiE,QAAQ,yBAGnD,eAACkD,EAAA,EAAD,CAASU,UAAQ,EAAjB,UACE,cAAClB,EAAA,EAAD,CAAQ1C,QAAQ,mBAAmBgE,KAAG,EAACpB,MAAM,SAC7C,cAAC,KAAD,CAAQwD,iBAAkBA,GAAkB4B,oBAAkB,EAAC/C,cAAejL,EAAUkL,SAAU,SAAC/G,GAAD,OAnB7E,SAACnE,GACxB,GAAKA,EAASF,GAIZ2D,EAAezD,GAAUX,MAAK,kBAAMZ,EAAQC,KAAR,sBAA4BsB,EAASF,YAJzD,CAChB,IAAI0D,EAAW,2BAAQxD,GAAR,IAAkBF,GAAImO,iBACrC3K,EAAeE,GAAanE,MAAK,kBAAMZ,EAAQC,KAAR,sBAA4B8E,EAAY1D,SAgB+BoO,CAAiB/J,IAA/H,SACG,gBAAGmH,EAAH,EAAGA,aAAciB,EAAjB,EAAiBA,QAAShB,EAA1B,EAA0BA,aAAciB,EAAxC,EAAwCA,MAAxC,OACC,eAAC,KAAD,CAAMhB,UAAU,UAAUN,SAAUI,EAAcG,aAAa,MAA/D,UACE,cAAC,GAAD,CAAaC,YAAY,QAAQrE,KAAK,UACtC,cAAC,GAAD,CAAa8G,gBAAgB,OAAO9G,KAAK,OAAO+G,gBAAc,EAACC,YAAY,OAAOC,WAAW,yBAC7F,cAAC,GAAD,CAAY5C,YAAY,cAAcrE,KAAK,cAAckH,KAAM,IAC/D,cAAC,GAAD,CAAe7C,YAAY,WAAWrE,KAAK,WAAW2F,QAASQ,KAC/D,cAAC9E,EAAA,EAAD,CAAQ1C,QAAQ,mBAAmBgE,KAAG,EAACpB,MAAM,SAC7C,cAAC,GAAD,CAAa8C,YAAY,OAAOrE,KAAK,SACrC,cAAC,GAAD,CAAaqE,YAAY,QAAQrE,KAAK,UACtC,cAACC,EAAA,EAAD,CAAQmF,SAAUlB,IAAiBiB,IAAUD,EAAST,QAASP,EAAc1B,QAAQ,QAAQtC,UAAQ,EAACoE,KAAK,SAAS3F,QAAQ,WAC5H,cAACsB,EAAA,EAAD,CAAQX,GAAIoB,IAAMjB,GAAG,cAAc+C,QAAQ,QAAQ8B,KAAK,SAAS3F,QAAQ,uB,UC7BtEK,gBA9Cc,WAC3B,OACE,qCACE,cAAC6C,EAAA,EAAD,CAASG,UAAU,SAASV,SAAS,MAAMpC,UAAQ,EAACqC,MAAM,OAAO1B,MAAO,CAAEsH,OAAQ,QAAlF,SACE,cAAC9F,EAAA,EAAD,sCAEF,cAACQ,EAAA,EAAD,CAASP,UAAQ,EAAjB,SACE,eAAC8F,GAAA,EAAQtF,MAAT,WACE,eAACsF,GAAA,EAAD,WACE,cAACA,GAAA,EAAQC,OAAT,CAAgB1H,IAAI,qBACpB,eAACyH,GAAA,EAAQlF,QAAT,WACE,cAACkF,GAAA,EAAQE,OAAT,CAAgBhI,GAAG,IAAnB,kBACA,cAAC8H,GAAA,EAAQG,SAAT,UACE,oDAEF,cAACH,GAAA,EAAQI,KAAT,4BACA,cAACJ,GAAA,EAAQK,QAAT,UACE,cAACL,GAAA,EAAQM,OAAT,4BAKN,eAACN,GAAA,EAAD,WACE,cAACA,GAAA,EAAQC,OAAT,CAAgB1H,IAAI,qBACpB,eAACyH,GAAA,EAAQlF,QAAT,WACE,cAACkF,GAAA,EAAQE,OAAT,CAAgBhI,GAAG,IAAnB,2BACA,cAAC8H,GAAA,EAAQG,SAAT,UACE,+CAEF,cAACH,GAAA,EAAQI,KAAT,oDACA,cAACJ,GAAA,EAAQK,QAAT,UACE,cAACL,GAAA,EAAQM,OAAT,4BAKN,eAACtE,GAAA,EAAD,CAAMuE,OAAK,EAAX,UACE,cAACvE,GAAA,EAAKwE,SAAN,IACA,cAAC3H,EAAA,EAAD,CAAQtB,QAAQ,YAAYkJ,cAAc,OAAOlH,KAAK,OAAOmH,SAAO,kBClC1EC,GAAqB,CACzBvL,OAAQ,mBAGJwL,GAAyB,CAC7B7H,SAAU,WACV8H,OAAQ,KACRC,KAAM,KACN/G,MAAO,OACPgH,OAAQ,OACR5G,MAAO,SA+DMvC,gBAxDgB,SAAC,GAAyB,IAAD,IAAtBrG,EAAsB,EAAtBA,SAChC,EAEImG,IADFZ,cAAiB3B,EADnB,EACmBA,iBAAkBhC,EADrC,EACqCA,UAAWkC,EADhD,EACgDA,qBAGhD,OACE,eAACoF,EAAA,EAAQC,MAAT,WACE,eAACD,EAAA,EAAD,CAASO,OAAK,EAACd,SAAS,MAAMzB,MAAO,CAAEuI,QAAS,KAAhD,UACGzP,EAAS+D,aAAe,cAACqF,EAAA,EAAD,CAAOlC,MAAO,CAAEM,SAAU,WAAYkI,OAAQ,IAAMH,MAAO,GAAII,IAAK,IAAMC,QAAM,EAAChH,MAAM,MAAM5C,QAAQ,cAC9H,cAACyB,EAAA,EAAD,CAAOT,IAAG,iCAA4BhH,EAASgB,SAArC,QAAqD+K,OAAK,EAAC7E,MAAOkI,KAC5E,cAAClG,EAAA,EAAD,CAAShC,MAAOmI,GAAwB5F,OAAK,EAA7C,SACE,cAAC/C,EAAA,EAAKyC,MAAN,UACE,cAACzC,EAAA,EAAD,UACE,eAACA,EAAA,EAAK6C,QAAN,WACE,cAACb,EAAA,EAAD,CAAQH,KAAK,OAAOvC,QAAShG,EAASe,MAAOmG,MAAO,CAAE0B,MAAO,WAC7D,4BAAIjE,kBAAO3E,EAASkB,KAAO,yBAC3B,0CACY,IACV,iCACE,cAAC,IAAD,CAAM4F,GAAE,8BAAe9G,EAAS+C,YAAxB,aAAe,EAAezB,UAAtC,mBAAmDtB,EAAS+C,YAA5D,aAAmD,EAAexB,+BAQhF,cAAC2H,EAAA,EAAD,CAASU,UAAQ,EAACjB,SAAS,SAA3B,SACG3I,EAAS6C,OACR,qCACE,cAACyE,EAAA,EAAD,CACEsB,MAAO5I,EAAS+D,YAAc,QAAU,MACxC8F,QAAQ,OACRJ,OAAK,EACLzD,QAAShG,EAAS+D,YAAc,uBAAyB,kBACzDkE,QAASnE,EACTgI,QAASlK,IAEX,cAAC0F,EAAA,EAAD,CAAQX,GAAIoB,IAAMjB,GAAE,kBAAa9G,EAASF,IAAM8I,MAAM,SAASiB,QAAQ,QAAQ4C,SAAUzM,EAAS+D,YAAlG,6BAIA/D,EAAS0C,QACX,cAAC4E,EAAA,EAAD,CAAQwE,QAASlK,EAAWqG,QAASrE,EAArC,+BAIA,cAAC0D,EAAA,EAAD,CAAQwE,QAASlK,EAAWqG,QAASrE,EAAkBgF,MAAM,OAAO6D,SAAUzM,EAAS+D,YAAvF,mCC/BKsC,gBA/BiB,SAAC,GAA8C,IAAD,IAA3CrG,SAAY2C,EAA+B,EAA/BA,UAAWI,EAAoB,EAApBA,KACxD,OAAKJ,EAEH,qCACE,eAACuG,EAAA,EAAD,CAASG,UAAU,SAASnC,MAAO,CAAEsH,OAAQ,QAAU7F,SAAS,MAAMgB,WAAS,EAACpD,UAAQ,EAACqC,MAAM,OAA/F,UACGjG,EAAUkN,OADb,IAC2C,IAArBlN,EAAUkN,OAAe,SAAW,SAD1D,YAGA,cAAC3G,EAAA,EAAD,CAASP,UAAQ,EAAjB,SACE,cAACE,GAAA,EAAD,CAAMiH,SAAO,EAACC,SAAO,EAArB,SACGpN,EAAUoG,KAAI,SAACxF,GAAD,OACb,eAACmD,EAAA,EAAD,CAAMQ,MAAO,CAAEM,SAAU,YAAzB,UACGjE,EAASjC,YAAT,OAAsByB,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAMzB,UAC3B,cAAC8H,EAAA,EAAD,CAAOlC,MAAO,CAAEM,SAAU,YAAcoB,MAAM,SAASgH,OAAO,QAA9D,kBAGE,KACJ,cAACnI,EAAA,EAAD,CAAOc,KAAK,OAAOvB,IAAKzD,EAAS/B,OAAS,qBAC1C,eAACkF,EAAA,EAAK6C,QAAN,CAAcyG,cAAc,SAA5B,UACE,cAACtJ,EAAA,EAAKgC,OAAN,CAAa/B,GAAG,KAAhB,SACE,cAAC,IAAD,CAAMG,GAAE,oBAAevD,EAASjC,UAAhC,SAA6CiC,EAASjC,aAExD,cAACoF,EAAA,EAAKuJ,MAAN,CAAY/I,MAAO,CAAE0B,MAAO,UAA5B,4BAXwCrF,EAASjC,oBATxC,QCsCV+E,gBAvCc,SAAC,GAAyB,IAAvBrG,EAAsB,EAAtBA,SAC9B,OACE,eAACkJ,EAAA,EAAQC,MAAT,WACE,cAACD,EAAA,EAAD,CAASP,SAAS,MAAlB,SACE,eAACuB,EAAA,EAAD,WACE,cAACA,EAAA,EAAKC,OAAN,CAAa3B,MAAO,EAApB,SACE,cAACkB,GAAA,EAAD,CAAMnB,KAAK,QAAQK,MAAM,OAAOvB,KAAK,WAEvC,cAAC6C,EAAA,EAAKC,OAAN,CAAa3B,MAAO,GAApB,SACE,4BAAIxI,EAASiB,qBAInB,cAACiI,EAAA,EAAD,CAASP,UAAQ,EAAjB,SACE,eAACuB,EAAA,EAAD,CAAM8F,cAAc,SAApB,UACE,cAAC9F,EAAA,EAAKC,OAAN,CAAa3B,MAAO,EAApB,SACE,cAACkB,GAAA,EAAD,CAAMrC,KAAK,WAAWkB,KAAK,QAAQK,MAAM,WAE3C,cAACsB,EAAA,EAAKC,OAAN,CAAa3B,MAAO,GAApB,SACE,+BAAO7D,kBAAO3E,EAASkB,KAAO,gCAIpC,cAACgI,EAAA,EAAD,CAASP,UAAQ,EAAjB,SACE,eAACuB,EAAA,EAAD,CAAM8F,cAAc,SAApB,UACE,cAAC9F,EAAA,EAAKC,OAAN,CAAa3B,MAAO,EAApB,SACE,cAACkB,GAAA,EAAD,CAAMrC,KAAK,SAASkB,KAAK,QAAQK,MAAM,WAEzC,cAACsB,EAAA,EAAKC,OAAN,CAAa3B,MAAO,GAApB,SACE,iCACGxI,EAASoB,MADZ,KACqBpB,EAASmB,qBCK3BkF,gBA/BS,WACtB,IAAQd,EAAkBY,IAAlBZ,cAEYvF,EAGhBuF,EAHF1D,iBACAS,EAEEiD,EAFFjD,aACAP,EACEwD,EADFxD,eAGMjC,EAAO+N,cAAP/N,GAMR,OAJAmK,qBAAU,WACJnK,GAAIwC,EAAaxC,KACpB,CAACA,EAAIwC,IAEJP,IAAmB/B,EACd,cAAC,EAAD,CAAkBgG,QAAQ,YAGjC,eAACkE,EAAA,EAAD,WACE,eAACA,EAAA,EAAKC,OAAN,CAAa3B,MAAO,GAApB,UACE,cAAC,GAAD,CAAwBxI,SAAUA,IAClC,cAAC,GAAD,CAAsBA,SAAUA,IAChC,cAAC,GAAD,OAEF,cAACkK,EAAA,EAAKC,OAAN,CAAa3B,MAAO,EAApB,SACE,cAAC,GAAD,CAAyBxI,SAAUA,YCY5BkQ,GA9CI,WACjB,IACA,EAA4BrF,mBAAS,MAArC,mBAAOtM,EAAP,KAAe4M,EAAf,KA0BA,OACE,qCACE,cAACzC,EAAA,EAAD,CAAQ/B,GAAG,KAAKX,QAAQ,yBACxB,cAACkD,EAAA,EAAD,UACE,eAAC5B,EAAA,EAAO6B,MAAR,CAAcgH,OAAO,IAArB,UACE,cAAC7I,EAAA,EAAD,CAAQW,QA7BhB,WACE9K,IAAMiC,IAAIgR,uBAA6B/E,OAAM,SAACa,GAAD,OAAS9J,QAAQC,IAAI6J,EAAIlO,cA4B/BgI,QAAQ,YAAYyD,OAAK,EAAC0F,SAAO,IAClE,cAAC7H,EAAA,EAAD,CAAQW,QA1BhB,WACE9K,IAAMiC,IAAIgR,yBAA+B/E,OAAM,SAACa,GAAD,OAAS9J,QAAQC,IAAI6J,EAAIlO,cAyB/BgI,QAAQ,cAAcyD,OAAK,EAAC0F,SAAO,IACtE,cAAC7H,EAAA,EAAD,CAAQW,QAXhB,WACE9K,IAAMoC,KAAK6Q,iBAAwB,IAAI/E,OAAM,SAACa,GAAD,OAASf,EAAUe,OAUlBlG,QAAQ,mBAAmByD,OAAK,EAAC0F,SAAO,IAChF,cAAC7H,EAAA,EAAD,CAAQW,QAxBhB,WACE9K,IAAMiC,IAAIgR,0BAAgC/E,OAAM,SAACa,GAAD,OAAS9J,QAAQC,IAAI6J,EAAIlO,cAuB/BgI,QAAQ,eAAeyD,OAAK,EAAC0F,SAAO,IACxE,cAAC7H,EAAA,EAAD,CAAQW,QArBhB,WACE9K,IAAMiC,IAAIgR,0BAAgC/E,OAAM,SAACa,GAAD,OAAS9J,QAAQC,IAAI6J,EAAIlO,cAoB9BgI,QAAQ,eAAeyD,OAAK,EAAC0F,SAAO,IACzE,cAAC7H,EAAA,EAAD,CAAQW,QAlBhB,WACE9K,IAAMiC,IAAIgR,2BAAiC/E,OAAM,SAACa,GAAD,OAAS9J,QAAQC,IAAI6J,OAiBhClG,QAAQ,WAAWyD,OAAK,EAAC0F,SAAO,SAGnE5Q,GAAU,cAAC,GAAD,CAAiBA,OAAQA,QC1B3B8R,GAhBE,WACf,OACE,eAACnH,EAAA,EAAD,CAASwC,aAAW,EAApB,UACE,eAAChD,EAAA,EAAD,CAAQV,MAAI,EAAZ,UACE,cAAC0B,GAAA,EAAD,CAAMrC,KAAK,WADb,2DAIA,cAAC6B,EAAA,EAAQoH,OAAT,UACE,cAAChJ,EAAA,EAAD,CAAQX,GAAIoB,IAAMjB,GAAG,aAAaqI,SAAO,EAAzC,6CCUO9I,gBAjBK,WAClB,IACQnI,EADgBiI,IAAhBtI,YACAK,MACR,OACE,eAACuI,EAAA,EAAD,WACE,cAACiC,EAAA,EAAD,CAAQ/B,GAAG,KAAKX,QAAQ,iBACxB,cAAC0C,EAAA,EAAD,CAAQsB,KAAG,EAACrD,GAAG,KAAKiC,MAAM,MAAM5C,QAAO,OAAE9H,QAAF,IAAEA,OAAF,EAAEA,EAAOqS,WAC1C,OAALrS,QAAK,IAALA,OAAA,EAAAA,EAAO2B,UACN,eAACqJ,EAAA,EAAD,WACE,cAACR,EAAA,EAAD,CAAQ/B,GAAG,KAAKX,QAAQ,cAAc4C,MAAM,SAC5C,sBAAM1B,MAAO,CAAEuB,UAAW,QAA1B,SAAqCvK,EAAM2B,mB,UCAtCwG,gBAVQ,WACrB,IAAQrB,EAAemB,IAAfnB,WACAa,EAAsBb,EAAtBa,MAAOZ,EAAeD,EAAfC,WACf,OACE,cAACuL,GAAA,EAAD,CAAO1K,KAAMD,EAAMC,KAAM2K,QAASxL,EAAYsD,KAAK,OAAnD,SACE,cAACiI,GAAA,EAAMjH,QAAP,UAAgB1D,EAAMvG,YCsDb+G,oBA7Cf,WACE,IAAMqK,EAAWC,cACjB,EAAmCxK,IAA3BtI,EAAR,EAAQA,YAAa4E,EAArB,EAAqBA,UACb9E,EAAmCE,EAAnCF,MAAO+H,EAA4B7H,EAA5B6H,aAAcD,EAAc5H,EAAd4H,UACrBH,EAAY7C,EAAZ6C,QAUR,OARA2E,qBAAU,WACJtM,EACF2H,IAAUsL,SAAQ,kBAAMlL,OAExBA,MAED,CAAC7H,EAAa4E,EAAW6C,EAASI,EAAc/H,IAE9C8H,EAGH,qCACE,cAAC,IAAD,CAAgB+B,SAAS,eAAeqJ,iBAAe,IACvD,cAAC,GAAD,IACA,cAAC,IAAD,CAAOC,KAAK,IAAIjK,OAAK,EAACkK,UAAWC,KACjC,cAAC,IAAD,CAEEF,KAAM,QACNlF,OAAQ,kBACN,qCACE,cAAC,EAAD,IACA,cAACnF,EAAA,EAAD,CAAWS,MAAO,CAAEuB,UAAW,OAA/B,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO5B,OAAK,EAACiK,KAAK,cAAcC,UAAWE,KAC3C,cAAC,IAAD,CAAOH,KAAK,kBAAkBC,UAAWG,KACzC,cAAC,IAAD,CAA0BJ,KAAM,CAAC,cAAe,mBAAoBC,UAAWI,IAAnET,EAAS9R,KACrB,cAAC,IAAD,CAAOkS,KAAK,UAAUC,UAAWb,KACjC,cAAC,IAAD,CAAOY,KAAK,gBAAgBC,UAAWK,KACvC,cAAC,IAAD,CAAON,KAAK,SAASC,UAAWM,KAChC,cAAC,IAAD,CAAON,UAAWV,mBArBT,cAAC,EAAD,CAAkBrK,QAAQ,uBCnBpCsL,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBnS,MAAK,YAAkD,IAA/CoS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,SCID9S,GAAUqT,eAEvBC,IAASnG,OAEP,cAAC3F,EAAa+L,SAAd,CAAuB/E,MAAOrP,EAA9B,SACE,cAAC,IAAD,CAAQa,QAASA,GAAjB,SACE,cAAC,GAAD,QAIJwT,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.147c5797.chunk.js","sourcesContent":["/* This file contains all of the app requests to the API */\n\nimport axios, { AxiosError, AxiosResponse } from 'axios';\nimport { toast } from 'react-toastify';\nimport { history } from '../..';\nimport { Activity, ActivityFormValues } from '../models/activity';\nimport { store } from '../stores/store';\nimport { User, UserFormValue } from '../models/user';\n\n//create a function to delay the response by the certain amount of time\nconst sleep = (delay: number) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, delay);\n  });\n};\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\n// Adding the API token to axios requests (every request)\n\naxios.interceptors.request.use((config) => {\n  const token = store.commonStore.token;\n  if (token) config.headers.Authorization = `Bearer ${token}`;\n  return config;\n});\n\n// delay all responses by 1000 ms to test the loading indicator functionality.\naxios.interceptors.response.use(\n  async (response) => {\n    if (process.env.NODE_ENV === 'development') {\n      await sleep(1000);\n    }\n    return response;\n  },\n  (error: AxiosError) => {\n    const { data, status, config } = error.response!;\n    switch (status) {\n      case 400:\n        if (typeof data === 'string') {\n          toast.error(data);\n        }\n        if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\n          history.push('/not-found');\n        }\n        if (data.errors) {\n          const modalStateErrors = [];\n          for (const key in data.errors) {\n            if (data.errors[key]) {\n              modalStateErrors.push(data.errors[key]);\n            }\n          }\n          throw modalStateErrors.flat();\n        }\n        break;\n      case 401:\n        toast.error('unauthorised');\n        break;\n      case 404:\n        toast.error('not found');\n        history.push('/not-found');\n        break;\n      case 500:\n        store.commonStore.setServerError(data);\n        history.push('/server-error');\n        toast.error('server error');\n        break;\n    }\n    return Promise.reject(error);\n  }\n);\n\n//Extract the body of the response\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\n\n//Create a requests object to hold axios templates\nconst requests = {\n  get: <T>(url: string) => axios.get<T>(url).then(responseBody),\n  post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\n  put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n  delete: <T>(url: string) => axios.delete<T>(url).then(responseBody),\n};\n\n//Activities object hold api calls for CRUD operations\nconst Activities = {\n  list: () => requests.get<Activity[]>('/activities'),\n  details: (id: string) => requests.get<Activity>(`/Activities/${id}`),\n  create: (activity: ActivityFormValues) => requests.post<void>('/Activities', activity),\n  update: (activity: ActivityFormValues) => requests.put<void>(`Activities/${activity.id}`, activity),\n  delete: (id: string) => requests.delete<void>(`/Activities/${id}`),\n  attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {}),\n};\n\nconst Account = {\n  current: () => requests.get<User>('/account'),\n  login: (user: UserFormValue) => requests.post<User>('/account/login', user),\n  register: (user: UserFormValue) => requests.post<User>('/account/register', user),\n};\n\nconst agent = {\n  Activities,\n  Account,\n};\n\nexport default agent;\n","import { Profile } from './profile';\n\nexport interface Activity {\n  id: string;\n  title: string;\n  date: Date | null;\n  description: string;\n  category: string;\n  city: string;\n  venue: string;\n  hostUsername: string;\n  isCancelled: boolean;\n  isGoing: boolean;\n  isHost: boolean;\n  host?: Profile;\n  attendees: Profile[];\n}\n\nexport class Activity implements Activity {\n  constructor(init?: ActivityFormValues) {\n    Object.assign(this, init);\n  }\n}\n\nexport class ActivityFormValues {\n  id?: string = undefined;\n  title: string = '';\n  category: string = '';\n  description: string = '';\n  date: Date | null = null;\n  city: string = '';\n  venue: string = '';\n\n  constructor(activity?: ActivityFormValues) {\n    if (activity) {\n      this.id = activity.id;\n      this.title = activity.title;\n      this.category = activity.category;\n      this.description = activity.description;\n      this.date = activity.date;\n      this.venue = activity.venue;\n      this.city = activity.city;\n    }\n  }\n}\n","import { User } from './user';\n\nexport interface Profile {\n  username: string;\n  displayName: string;\n  image?: string;\n  bio?: string;\n}\n\nexport class Profile implements Profile {\n  constructor(user: User) {\n    this.username = user.username;\n    this.displayName = user.displayName;\n    this.image = user.image;\n  }\n}\n","import { makeAutoObservable, runInAction } from 'mobx';\nimport agent from '../api/agent';\nimport { Activity, ActivityFormValues } from '../models/activity';\nimport { format } from 'date-fns';\nimport { store } from './store';\nimport { Profile } from '../models/profile';\n\nexport default class ActivityStore {\n  activityRegistry = new Map<string, Activity>();\n  isLoading: boolean = false;\n  selectedActivity: Activity | undefined = undefined;\n  editMode: boolean = false;\n  loadingInitial: boolean = true;\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  //computed properties, sorting activities by date\n  get activitiesByDate() {\n    return Array.from(this.activityRegistry.values()).sort((a, b) => a.date!.getTime() - b.date!.getTime());\n  }\n\n  //computed property, group activities by date\n  get groupedActivities() {\n    return Object.entries(\n      this.activitiesByDate.reduce((activities, activity) => {\n        const date = format(activity.date!, 'dd MMM yyyy');\n        activities[date] = activities[date] ? [...activities[date], activity] : [activity];\n        return activities;\n      }, {} as { [key: string]: Activity[] })\n    );\n  }\n\n  loadActivities = async () => {\n    this.setLoadingInitial(true);\n    try {\n      const activities = await agent.Activities.list();\n      activities.forEach((activity) => {\n        this.setActivity(activity);\n      });\n      this.setLoadingInitial(false);\n    } catch (error) {\n      console.log(error);\n      this.setLoadingInitial(false);\n    }\n  };\n\n  loadActivity = async (id: string) => {\n    //get the activity from activities state in the memory\n    let activity = this.getActivity(id);\n    //if the activity is available in memory then set the selectedActivity, else makes an api call to get it from the server.\n    if (activity) {\n      this.selectedActivity = activity;\n      return activity;\n    } else {\n      this.setLoadingInitial(true);\n      try {\n        activity = await agent.Activities.details(id);\n        this.setActivity(activity);\n        runInAction(() => {\n          this.selectedActivity = activity;\n        });\n        this.setLoadingInitial(false);\n        return activity;\n      } catch (error) {\n        console.log(error);\n        this.setLoadingInitial(false);\n      }\n    }\n  };\n\n  //get an activity from activities in memory. If the activity is not in the memory then we need to make an api call to get it.\n  private getActivity = (id: string) => {\n    return this.activityRegistry.get(id);\n  };\n\n  private setActivity = (activity: Activity) => {\n    const user = store.userStore.user;\n    if (user) {\n      // check if the current user is in the list of attendees (they are going or not)\n      activity.isGoing = activity.attendees!.some((a) => a.username === user.username);\n      // check if the current user is the host of the activity\n      activity.isHost = activity.hostUsername === user.username;\n      // find the host from the list of attendees and assign it to the host property.\n      activity.host = activity.attendees?.find((x) => x.username === activity.hostUsername);\n    }\n    activity.date = new Date(activity.date!);\n\n    //With MobX, we can mutate the state directly, unlike Redux the state is immutable and has to replaced by a new state.\n    this.activityRegistry.set(activity.id, activity);\n  };\n\n  setLoadingInitial = (state: boolean) => {\n    this.loadingInitial = state;\n  };\n\n  setIsLoading = (state: boolean) => {\n    this.isLoading = state;\n  };\n\n  createActivity = async (activity: ActivityFormValues) => {\n    const user = store.userStore.user;\n    const attendee = new Profile(user!);\n    try {\n      await agent.Activities.create(activity);\n      const newActivity = new Activity(activity);\n      newActivity.hostUsername = user!.username;\n      newActivity.attendees = [attendee];\n      this.setActivity(newActivity);\n      runInAction(() => {\n        this.selectedActivity = newActivity;\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  updateActivity = async (activity: ActivityFormValues) => {\n    try {\n      await agent.Activities.update(activity);\n      runInAction(() => {\n        if (activity.id) {\n          let updatedActivity = { ...this.getActivity(activity.id), ...activity };\n          this.activityRegistry.set(activity.id, updatedActivity as Activity);\n          //we can also create a new state and replace the current state in MobX.\n          this.selectedActivity = updatedActivity as Activity;\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  deleteActivity = async (id: string) => {\n    this.setIsLoading(true);\n    try {\n      await agent.Activities.delete(id);\n      runInAction(() => {\n        this.activityRegistry.delete(id);\n        this.setIsLoading(false);\n      });\n      this.setIsLoading(false);\n    } catch (error) {\n      console.log(error);\n      this.setIsLoading(false);\n    }\n  };\n\n  updateAttendance = async () => {\n    const user = store.userStore.user;\n    this.isLoading = true;\n    try {\n      await agent.Activities.attend(this.selectedActivity!.id);\n      runInAction(() => {\n        if (this.selectedActivity?.isGoing) {\n          // if the current user is going to this activity then remove them from the attendee list\n          this.selectedActivity.attendees = this.selectedActivity.attendees?.filter((a) => a.username !== user?.username);\n          this.selectedActivity.isGoing = false;\n        } else {\n          // add the user to the list of the attendees if they are joinning the activity\n          const attendee = new Profile(user!);\n          this.selectedActivity?.attendees?.push(attendee);\n          this.selectedActivity!.isGoing = true;\n        }\n        this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n      });\n    } catch (error) {\n      console.log(error);\n    } finally {\n      runInAction(() => (this.isLoading = false));\n    }\n  };\n\n  cancelActivityToggle = async () => {\n    this.isLoading = true;\n    try {\n      await agent.Activities.attend(this.selectedActivity!.id);\n      runInAction(() => {\n        this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\n        this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n      });\n    } catch (error) {\n      console.log(error);\n    } finally {\n      runInAction(() => (this.isLoading = false));\n    }\n  };\n}\n","import { makeAutoObservable } from 'mobx';\nimport { history } from '../..';\nimport agent from '../api/agent';\nimport { User, UserFormValue } from '../models/user';\n\nimport { store } from './store';\n\nexport default class UserStore {\n  user: User | null = null;\n  constructor() {\n    makeAutoObservable(this);\n  }\n  //computed property to regconize if the user is logged in\n  get isLoggedIn() {\n    return !!this.user;\n  }\n\n  login = async (creds: UserFormValue) => {\n    try {\n      const user = await agent.Account.login(creds);\n      store.commonStore.setToken(user.token);\n      console.log(user);\n      this.setUser(user);\n      //redirect users to the Activities dashboard after they sucessfully login\n      history.push('/activities');\n      //close modal after the user successfully login\n      store.modalStore.closeModal();\n    } catch (error) {\n      //If we catch an error, throw it back to the LoginForm, the component that called the method\n      throw error;\n    }\n  };\n\n  register = async (creds: UserFormValue) => {\n    try {\n      const user = await agent.Account.register(creds);\n      store.commonStore.setToken(user.token);\n      console.log(user);\n      this.setUser(user);\n      //redirect users to the Activities dashboard after they sucessfully login\n      history.push('/activities');\n      //close modal after the user successfully login\n      store.modalStore.closeModal();\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  logout = () => {\n    store.commonStore.setToken(null);\n    window.localStorage.removeItem('jwt');\n    this.setUser(null);\n    history.push('/');\n  };\n\n  setUser = (user: User | null) => {\n    this.user = user;\n  };\n\n  getUser = async () => {\n    try {\n      const user = await agent.Account.current();\n      this.setUser(user);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}\n","import ActivityStore from './activityStore';\nimport { createContext, useContext } from 'react';\nimport CommonStore from './commonStore';\nimport UserStore from './userStore';\nimport ModalStore from './modalStore';\ninterface Store {\n  activityStore: ActivityStore;\n  commonStore: CommonStore;\n  userStore: UserStore;\n  modalStore: ModalStore;\n}\n\nexport const store: Store = {\n  activityStore: new ActivityStore(),\n  commonStore: new CommonStore(),\n  userStore: new UserStore(),\n  modalStore: new ModalStore(),\n};\n\nexport const StoreContext = createContext(store);\n\nexport function useStore() {\n  return useContext(StoreContext);\n}\n","import { makeAutoObservable, reaction } from 'mobx';\nimport { ServerError } from '../models/serverError';\n\nexport default class CommonStore {\n  error: ServerError | null = null;\n  token: string | null = window.localStorage.getItem('jwt');\n  appLoaded = false;\n\n  constructor() {\n    makeAutoObservable(this);\n    //MobX reaction - react to a value change\n    reaction(\n      //react to token property\n      () => this.token,\n      (token) => {\n        if (token) {\n          window.localStorage.setItem('jwt', token);\n        } else window.localStorage.removeItem('jwt');\n      }\n    );\n  }\n\n  setServerError = (error: ServerError) => {\n    this.error = error;\n  };\n\n  setToken = (token: string | null) => {\n    this.token = token;\n  };\n\n  setAppLoaded = () => {\n    this.appLoaded = true;\n  };\n}\n","import { makeAutoObservable } from 'mobx';\n\ninterface Modal {\n  open: boolean;\n  body: JSX.Element | null;\n}\n\nexport default class ModalStore {\n  modal: Modal = {\n    open: false,\n    body: null,\n  };\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  openModal = (content: JSX.Element) => {\n    this.modal.open = true;\n    this.modal.body = content;\n  };\n\n  closeModal = () => {\n    this.modal.open = false;\n    this.modal.body = null;\n  };\n}\n","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link, NavLink } from 'react-router-dom';\nimport { Menu, Container, MenuItem, Button, Image, Dropdown } from 'semantic-ui-react';\nimport { useStore } from '../stores/store';\n\nconst NavBar = () => {\n  const { userStore } = useStore();\n  const { user, logout } = userStore;\n  return (\n    <Menu inverted fixed='top'>\n      <Container>\n        <Menu.Item as={NavLink} exact to='/' header>\n          <img src='/assets/logo.png' alt='logo' style={{ marginRight: '10px' }} />\n          Eventify\n        </Menu.Item>\n        <MenuItem as={NavLink} name='Activities' to='/activities' />\n        <MenuItem as={NavLink} name='Errors' to='/errors' />\n        <Menu.Item>\n          <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\n        </Menu.Item>\n        <Menu.Item position='right'>\n          <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\n          <Dropdown pointing='top left' text={user?.displayName}>\n            <Dropdown.Menu>\n              <Dropdown.Item as={Link} to={`/profile/${user?.username}`} text='My Profile' icon='user' />\n              <Dropdown.Item onClick={logout} text='Logout' icon='power' />\n            </Dropdown.Menu>\n          </Dropdown>\n        </Menu.Item>\n      </Container>\n    </Menu>\n  );\n};\n\nexport default observer(NavBar);\n","import * as React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\ninterface Props {\n  inverted?: boolean;\n  content: string;\n}\nconst LoadingComponent = ({ inverted = true, content = 'Loading...' }: Props) => {\n  return (\n    <Dimmer active={true} inverted={inverted}>\n      <Loader content={content} />\n    </Dimmer>\n  );\n};\nexport default LoadingComponent;\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Header, Menu } from 'semantic-ui-react';\nimport Calendar from 'react-calendar';\n\nconst ActivityFilters = () => {\n  return (\n    <>\n      <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\n        <Header icon='filter' attached color='teal' content='Filters' />\n        <Menu.Item content='All Activities' />\n        <Menu.Item content='I am going' />\n        <Menu.Item content='I am hosting' />\n      </Menu>\n      <Header />\n      <Calendar />\n    </>\n  );\n};\n\nexport default observer(ActivityFilters);\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { List, Image } from 'semantic-ui-react';\nimport { Profile } from '../../../app/models/profile';\nimport { Link } from 'react-router-dom';\n\ninterface Props {\n  attendees: Profile[];\n}\n\nconst ActivityListItemAttendee = ({ attendees }: Props) => {\n  return (\n    <List horizontal>\n      {attendees.map((attendee) => (\n        <List.Item\n          key={attendee.username}\n          as={Link}\n          to={`/profiles/${attendee.username}`}\n        >\n          <Image\n            size=\"mini\"\n            circular\n            src={attendee.image || '/assets/user.png'}\n          />\n        </List.Item>\n      ))}\n    </List>\n  );\n};\n\nexport default observer(ActivityListItemAttendee);\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\nimport { Activity } from '../../../app/models/activity';\nimport { format } from 'date-fns';\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\n\ninterface Props {\n  activity: Activity;\n}\n\nconst ActivityListItem = ({ activity }: Props) => {\n  return (\n    <Segment.Group>\n      <Segment>\n        {activity.isCancelled && <Label attached=\"top\" color=\"red\" content=\"Cancelled\" style={{ textAlign: 'center' }} />}\n        <Item.Group>\n          <Item>\n            <Item.Image site=\"tiny\" circular src=\"/assets/user.png\" />\n            <Item.Content>\n              <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                {activity.title}\n              </Item.Header>\n              <Item.Description>Hosted by {activity.host?.username}</Item.Description>\n              {activity.isHost && (\n                <Item.Description>\n                  <Label basic color=\"orange\">\n                    You are hosting this activity\n                  </Label>\n                </Item.Description>\n              )}\n              {activity.isGoing && !activity.isHost && (\n                <Item.Description>\n                  <Label basic color=\"green\">\n                    You are going this activity\n                  </Label>\n                </Item.Description>\n              )}\n            </Item.Content>\n          </Item>\n        </Item.Group>\n      </Segment>\n      <Segment>\n        <span>\n          <Icon name=\"clock\" />\n          {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n          <Icon name=\"marker\" />\n          {activity.venue}\n        </span>\n      </Segment>\n      <Segment secondary>\n        <ActivityListItemAttendee attendees={activity.attendees!} />\n      </Segment>\n      <Segment clearing>\n        <span>{activity.description}</span>\n        <Button as={Link} to={`/activities/${activity.id}`} color=\"teal\" floated=\"right\" content=\"View\" />\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default ActivityListItem;\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Fragment } from 'react';\nimport { Header } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityListItem from './ActivityListItem';\n\nconst ActivityList = () => {\n  const { activityStore } = useStore();\n  const { groupedActivities } = activityStore;\n\n  return (\n    <>\n      {groupedActivities.map(([group, activities]) => (\n        <Fragment key={group}>\n          <Header sub color='teal'>\n            {group}\n          </Header>\n          {activities.map((activity) => (\n            <ActivityListItem key={activity.id} activity={activity} />\n          ))}\n        </Fragment>\n      ))}\n    </>\n  );\n};\n\nexport default observer(ActivityList);\n","import { observer } from 'mobx-react-lite';\nimport React, { useEffect } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityFilters from './ActivityFilters';\nimport ActivityList from './ActivityList';\n\nconst ActivityDashboard = () => {\n  const { activityStore } = useStore();\n  const { loadActivities, activityRegistry, loadingInitial } = activityStore;\n\n  //This state is used to control the button loading indicator\n\n  useEffect(() => {\n    /*check if we already have the activityRegistry in the memory or not. If we have then we don't need to load the activities again.\n    When we edit an activity and refresh the page, the activityRegistry only has 1 activity. Therefore the condition should be <= 1.*/\n    if (activityRegistry.size <= 1) loadActivities();\n  }, [loadActivities, activityRegistry.size]);\n\n  if (loadingInitial) return <LoadingComponent content='Loading activities' />;\n\n  return (\n    <Grid>\n      <Grid.Column width='10'>\n        <ActivityList />\n      </Grid.Column>\n      <Grid.Column width='6'>\n        <ActivityFilters />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ActivityDashboard);\n","import React from 'react';\nimport { useField } from 'formik';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n  placeholder: string;\n  name: string;\n  type?: string;\n  label?: string;\n}\n\nconst MyTextInput = (props: Props) => {\n  const [field, meta] = useField(props.name);\n  return (\n    <Form.Field error={meta.touched && !!meta.error}>\n      <label>{props.label}</label>\n      <input {...field} {...props} />\n      {meta.touched && meta.error ? (\n        <Label basic color='red'>\n          {meta.error}\n        </Label>\n      ) : null}\n    </Form.Field>\n  );\n};\n\nexport default MyTextInput;\n","import { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React, { useState } from 'react';\nimport { Button, Header, Label } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\n\nconst LoginForm = () => {\n  const { userStore } = useStore();\n  const { login } = userStore;\n\n  const [userFormValues] = useState({\n    email: '',\n    password: '',\n    error: null,\n  });\n\n  return (\n    <Formik\n      initialValues={userFormValues}\n      onSubmit={(values, { setErrors, setSubmitting }) => {\n        login(values)\n          .then(() => setSubmitting(false))\n          .catch((error) => {\n            setErrors({ error: 'Invalid email or password' });\n            setSubmitting(false);\n          });\n      }}>\n      {({ handleSubmit, isSubmitting, errors }) => (\n        <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n          <Header as='h2' content='Login to Eventify' color='teal' textAlign='center' />\n          <MyTextInput name='email' placeholder='Email' />\n          <MyTextInput name='password' placeholder='Password' type='password' />\n          <ErrorMessage name='error' render={() => <Label style={{ marginBottom: 10 }} basic color='red' content={errors.error} />} />\n          <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default observer(LoginForm);\n","import React from 'react';\nimport { Message } from 'semantic-ui-react';\ninterface Props {\n  errors: any;\n}\nconst ValidationError = ({ errors }: Props) => {\n  return (\n    <Message error>\n      {errors && (\n        <Message.List>\n          {errors.map((err: any, i: any) => (\n            <Message.Item key={i}>{err}</Message.Item>\n          ))}\n        </Message.List>\n      )}\n    </Message>\n  );\n};\n\nexport default ValidationError;\n","import { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React, { useState } from 'react';\nimport { Button, Header } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\nimport * as Yup from 'yup';\nimport ValidationError from '../errors/ValidationError';\n\nconst RegisterForm = () => {\n  const { userStore } = useStore();\n  const { register } = userStore;\n\n  const [userFormValues] = useState({\n    email: '',\n    password: '',\n    displayName: '',\n    username: '',\n    error: null,\n  });\n\n  return (\n    <Formik\n      initialValues={userFormValues}\n      onSubmit={(values, { setErrors, setSubmitting }) => {\n        register(values)\n          .then(() => setSubmitting(false))\n          .catch((error) => {\n            setErrors({ error });\n            setSubmitting(false);\n          });\n      }}\n      validationSchema={Yup.object({\n        displayName: Yup.string().required(),\n        username: Yup.string().required(),\n        email: Yup.string().required().email(),\n        password: Yup.string().required(),\n      })}>\n      {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\n        <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n          <Header as='h2' content='Sign up to Eventify' color='teal' textAlign='center' />\n          <MyTextInput name='displayName' placeholder='Display Name' />\n          <MyTextInput name='username' placeholder='Username' />\n          <MyTextInput name='email' placeholder='Email' />\n          <MyTextInput name='password' placeholder='Password' type='password' />\n          <ErrorMessage name='error' render={() => <ValidationError errors={errors.error} />} />\n          <Button disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting} positive content='Submit' type='submit' fluid />\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default observer(RegisterForm);\n","import { observer } from 'mobx-react-lite';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Container, Header, Segment, Image, Button } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport LoginForm from '../users/LoginForm';\nimport RegisterForm from '../users/RegisterForm';\n\nconst HomePage = () => {\n  const { userStore, modalStore } = useStore();\n  const { isLoggedIn } = userStore;\n  const { openModal } = modalStore;\n\n  return (\n    <Segment inverted textAlign='center' vertical className='masthead'>\n      <Container text>\n        <Header as='h1' inverted>\n          <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\n          Eventify\n        </Header>\n        {isLoggedIn ? (\n          <>\n            <Header as='h2' inverted content='Welcome to Eventify' />\n            <Button as={Link} to='/activities' size='huge' inverted>\n              Take me to the Events\n            </Button>\n          </>\n        ) : (\n          <>\n            <Button onClick={() => openModal(<LoginForm />)} size='huge' inverted>\n              Login\n            </Button>\n            <Button onClick={() => openModal(<RegisterForm />)} size='huge' inverted>\n              Register\n            </Button>\n          </>\n        )}\n      </Container>\n    </Segment>\n  );\n};\n\nexport default observer(HomePage);\n","import React from 'react';\nimport { useField } from 'formik';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n  placeholder: string;\n  rows: number;\n  name: string;\n  label?: string;\n}\n\nconst MyTextArea = (props: Props) => {\n  const [field, meta] = useField(props.name);\n  return (\n    <Form.Field error={meta.touched && !!meta.error}>\n      <label>{props.label}</label>\n      <textarea {...field} {...props} />\n      {meta.touched && meta.error ? (\n        <Label basic color='red'>\n          {meta.error}\n        </Label>\n      ) : null}\n    </Form.Field>\n  );\n};\n\nexport default MyTextArea;\n","import React from 'react';\nimport { useField } from 'formik';\nimport { Form, Label, Select } from 'semantic-ui-react';\n\ninterface Props {\n  placeholder: string;\n  options: any;\n  name: string;\n  label?: string;\n}\n\nconst MySelectInput = (props: Props) => {\n  const [field, meta, helpers] = useField(props.name);\n  return (\n    <Form.Field error={meta.touched && !!meta.error}>\n      <label>{props.label}</label>\n      <Select\n        clearable\n        options={props.options}\n        value={field.value || null}\n        onChange={(e, d) => helpers.setValue(d.value)}\n        onBlur={() => helpers.setTouched(true)}\n        placeholder={props.placeholder}\n      />\n      {meta.touched && meta.error ? (\n        <Label basic color='red'>\n          {meta.error}\n        </Label>\n      ) : null}\n    </Form.Field>\n  );\n};\n\nexport default MySelectInput;\n","export const categoryOptions = [\n  { text: 'Drinks', value: 'drinks' },\n  { text: 'Culture', value: 'culture' },\n  { text: 'Film', value: 'film' },\n  { text: 'Food', value: 'food' },\n  { text: 'Music', value: 'music' },\n  { text: 'Travel', value: 'travel' },\n];\n","import React from 'react';\nimport { useField } from 'formik';\nimport { Form, Label } from 'semantic-ui-react';\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker';\n\nconst MyDateInput = (props: Partial<ReactDatePickerProps>) => {\n  const [field, meta, helpers] = useField(props.name!);\n  return (\n    <Form.Field error={meta.touched && !!meta.error}>\n      <DatePicker {...field} {...props} selected={(field.value && new Date(field.value)) || null} onChange={(value) => helpers.setValue(value)} />\n      {meta.touched && meta.error ? (\n        <Label basic color='red'>\n          {meta.error}\n        </Label>\n      ) : null}\n    </Form.Field>\n  );\n};\n\nexport default MyDateInput;\n","import { observer } from 'mobx-react-lite';\nimport * as React from 'react';\nimport { useEffect } from 'react';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { Button, Header, Segment } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport { v4 as uuid } from 'uuid';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../../app/common/form/MyTextInput';\nimport MyTextArea from '../../../app/common/form/MyTextArea';\nimport MySelectInput from '../../../app/common/form/MySelectInput';\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\nimport MyDateInput from '../../../app/common/form/MyDateInput';\nimport { Activity, ActivityFormValues } from '../../../app/models/activity';\n\ninterface Params {\n  id: string;\n}\n\n//validation schema\nconst validationSchema = Yup.object().shape({\n  title: Yup.string().required('The activity title is required'),\n  date: Yup.string().required('Date is required').nullable(),\n  description: Yup.string().required('The activity description is required'),\n  category: Yup.string().required(),\n  city: Yup.string().required(),\n  venue: Yup.string().required(),\n});\n\nconst ActivityForm = () => {\n  const { activityStore } = useStore();\n  const { isLoading, updateActivity, createActivity, loadActivity, loadingInitial, setLoadingInitial } = activityStore;\n  const { id } = useParams<Params>();\n  const history = useHistory();\n\n  const [activity, setActivity] = React.useState<ActivityFormValues>(new ActivityFormValues());\n\n  useEffect(() => {\n    if (id) {\n      loadActivity(id).then((activity) => {\n        setActivity(new ActivityFormValues(activity));\n      });\n    } else {\n      setLoadingInitial(false);\n    }\n  }, [id, loadActivity, setLoadingInitial]);\n\n  const handleFormSubmit = (activity: ActivityFormValues) => {\n    if (!activity.id) {\n      let newActivity = { ...activity, id: uuid() };\n      createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\n    } else {\n      updateActivity(activity).then(() => history.push(`/activities/${activity.id}`));\n    }\n  };\n\n  // const handleInputChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n  //   const { name, value } = event.target;\n  //   setActivity({ ...activity, [name]: value });\n  // };\n\n  if (loadingInitial) return <LoadingComponent content=\"Loading activity ...\" />;\n\n  return (\n    <Segment clearing>\n      <Header content=\"Activity Details\" sub color=\"teal\" />\n      <Formik validationSchema={validationSchema} enableReinitialize initialValues={activity} onSubmit={(values) => handleFormSubmit(values)}>\n        {({ handleSubmit, isValid, isSubmitting, dirty }) => (\n          <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete=\"off\">\n            <MyTextInput placeholder=\"Title\" name=\"title\" />\n            <MyDateInput placeholderText=\"Date\" name=\"date\" showTimeSelect timeCaption=\"time\" dateFormat=\"MMMM d, yyyy h:mm aa\" />\n            <MyTextArea placeholder=\"Description\" name=\"description\" rows={3} />\n            <MySelectInput placeholder=\"Category\" name=\"category\" options={categoryOptions} />\n            <Header content=\"Location Details\" sub color=\"teal\" />\n            <MyTextInput placeholder=\"City\" name=\"city\" />\n            <MyTextInput placeholder=\"Venue\" name=\"venue\" />\n            <Button disabled={isSubmitting || !dirty || !isValid} loading={isSubmitting} floated=\"right\" positive type=\"submit\" content=\"Submit\" />\n            <Button as={Link} to=\"/activities\" floated=\"right\" type=\"button\" content=\"Cancel\" />\n          </Form>\n        )}\n      </Formik>\n    </Segment>\n  );\n};\n\nexport default observer(ActivityForm);\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Segment, Header, Comment, Form, Button } from 'semantic-ui-react';\n\nconst ActivityDetailedChat = () => {\n  return (\n    <>\n      <Segment textAlign='center' attached='top' inverted color='teal' style={{ border: 'none' }}>\n        <Header>Chat about this event</Header>\n      </Segment>\n      <Segment attached>\n        <Comment.Group>\n          <Comment>\n            <Comment.Avatar src='/assets/user.png' />\n            <Comment.Content>\n              <Comment.Author as='a'>Matt</Comment.Author>\n              <Comment.Metadata>\n                <div>Today at 5:42PM</div>\n              </Comment.Metadata>\n              <Comment.Text>How artistic!</Comment.Text>\n              <Comment.Actions>\n                <Comment.Action>Reply</Comment.Action>\n              </Comment.Actions>\n            </Comment.Content>\n          </Comment>\n\n          <Comment>\n            <Comment.Avatar src='/assets/user.png' />\n            <Comment.Content>\n              <Comment.Author as='a'>Joe Henderson</Comment.Author>\n              <Comment.Metadata>\n                <div>5 days ago</div>\n              </Comment.Metadata>\n              <Comment.Text>Dude, this is awesome. Thanks so much</Comment.Text>\n              <Comment.Actions>\n                <Comment.Action>Reply</Comment.Action>\n              </Comment.Actions>\n            </Comment.Content>\n          </Comment>\n\n          <Form reply>\n            <Form.TextArea />\n            <Button content='Add Reply' labelPosition='left' icon='edit' primary />\n          </Form>\n        </Comment.Group>\n      </Segment>\n    </>\n  );\n};\n\nexport default observer(ActivityDetailedChat);\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react';\nimport { Activity } from '../../../app/models/activity';\nimport { Link } from 'react-router-dom';\nimport { format } from 'date-fns';\nimport { useStore } from '../../../app/stores/store';\n\nconst activityImageStyle = {\n  filter: 'brightness(30%)',\n};\n\nconst activityImageTextStyle = {\n  position: 'absolute',\n  bottom: '5%',\n  left: '5%',\n  width: '100%',\n  height: 'auto',\n  color: 'white',\n};\n\ninterface Props {\n  activity: Activity;\n}\n\nconst ActivityDetailedHeader = ({ activity }: Props) => {\n  const {\n    activityStore: { updateAttendance, isLoading, cancelActivityToggle },\n  } = useStore();\n\n  return (\n    <Segment.Group>\n      <Segment basic attached=\"top\" style={{ padding: '0' }}>\n        {activity.isCancelled && <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }} ribbon color=\"red\" content=\"Cancelled\" />}\n        <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\n        <Segment style={activityImageTextStyle} basic>\n          <Item.Group>\n            <Item>\n              <Item.Content>\n                <Header size=\"huge\" content={activity.title} style={{ color: 'white' }} />\n                <p>{format(activity.date!, 'dd MMM yyyy h:mm aa')}</p>\n                <p>\n                  Hosted by{' '}\n                  <strong>\n                    <Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link>\n                  </strong>\n                </p>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        </Segment>\n      </Segment>\n      <Segment clearing attached=\"bottom\">\n        {activity.isHost ? (\n          <>\n            <Button\n              color={activity.isCancelled ? 'green' : 'red'}\n              floated=\"left\"\n              basic\n              content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\n              onClick={cancelActivityToggle}\n              loading={isLoading}\n            />\n            <Button as={Link} to={`/manage/${activity.id}`} color=\"orange\" floated=\"right\" disabled={activity.isCancelled}>\n              Manage Event\n            </Button>\n          </>\n        ) : activity.isGoing ? (\n          <Button loading={isLoading} onClick={updateAttendance}>\n            Cancel attendance\n          </Button>\n        ) : (\n          <Button loading={isLoading} onClick={updateAttendance} color=\"teal\" disabled={activity.isCancelled}>\n            Join Activity\n          </Button>\n        )}\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default observer(ActivityDetailedHeader);\n","import React from 'react';\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { observer } from 'mobx-react-lite';\nimport { Activity } from '../../../app/models/activity';\n\ninterface Props {\n  activity: Activity;\n}\n\nconst ActivityDetailedSidebar = ({ activity: { attendees, host } }: Props) => {\n  if (!attendees) return null;\n  return (\n    <>\n      <Segment textAlign=\"center\" style={{ border: 'none' }} attached=\"top\" secondary inverted color=\"teal\">\n        {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\n      </Segment>\n      <Segment attached>\n        <List relaxed divided>\n          {attendees.map((attendee) => (\n            <Item style={{ position: 'relative' }} key={attendee.username}>\n              {attendee.username === host?.username ? (\n                <Label style={{ position: 'absolute' }} color=\"orange\" ribbon=\"right\">\n                  Host\n                </Label>\n              ) : null}\n              <Image size=\"tiny\" src={attendee.image || '/assets/user.png'} />\n              <Item.Content verticalAlign=\"middle\">\n                <Item.Header as=\"h3\">\n                  <Link to={`/profiles/${attendee.username}`}>{attendee.username}</Link>\n                </Item.Header>\n                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\n              </Item.Content>\n            </Item>\n          ))}\n        </List>\n      </Segment>\n    </>\n  );\n};\n\nexport default observer(ActivityDetailedSidebar);\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Segment, Grid, Icon } from 'semantic-ui-react';\nimport { Activity } from '../../../app/models/activity';\nimport { format } from 'date-fns';\n\ninterface Props {\n  activity: Activity;\n}\n\nconst ActivityDetailedInfo = ({ activity }: Props) => {\n  return (\n    <Segment.Group>\n      <Segment attached=\"top\">\n        <Grid>\n          <Grid.Column width={1}>\n            <Icon size=\"large\" color=\"teal\" name=\"info\" />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <p>{activity.description}</p>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign=\"middle\">\n          <Grid.Column width={1}>\n            <Icon name=\"calendar\" size=\"large\" color=\"teal\" />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <span>{format(activity.date!, 'dd MMM yyyy h:mm aa')}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign=\"middle\">\n          <Grid.Column width={1}>\n            <Icon name=\"marker\" size=\"large\" color=\"teal\" />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>\n              {activity.venue}, {activity.city}\n            </span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default observer(ActivityDetailedInfo);\n","import * as React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityDetailedChat from './ActivityDetailedChat';\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\ninterface Params {\n  id: string;\n}\nconst ActivityDetails = () => {\n  const { activityStore } = useStore();\n  const {\n    selectedActivity: activity,\n    loadActivity,\n    loadingInitial,\n  } = activityStore;\n\n  const { id } = useParams<Params>();\n\n  useEffect(() => {\n    if (id) loadActivity(id);\n  }, [id, loadActivity]);\n\n  if (loadingInitial || !activity)\n    return <LoadingComponent content=\"Loading\" />;\n\n  return (\n    <Grid>\n      <Grid.Column width={10}>\n        <ActivityDetailedHeader activity={activity} />\n        <ActivityDetailedInfo activity={activity} />\n        <ActivityDetailedChat />\n      </Grid.Column>\n      <Grid.Column width={6}>\n        <ActivityDetailedSidebar activity={activity} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ActivityDetails);\n","import React, { useState } from 'react';\nimport { Button, Header, Segment } from 'semantic-ui-react';\nimport axios from 'axios';\nimport ValidationError from './ValidationError';\n\nconst TestErrors = () => {\n  const baseUrl = process.env.REACT_APP_API_URL;\n  const [errors, setErrors] = useState(null);\n\n  function handleNotFound() {\n    axios.get(baseUrl + 'buggy/not-found').catch((err) => console.log(err.response));\n  }\n\n  function handleBadRequest() {\n    axios.get(baseUrl + 'buggy/bad-request').catch((err) => console.log(err.response));\n  }\n\n  function handleServerError() {\n    axios.get(baseUrl + 'buggy/server-error').catch((err) => console.log(err.response));\n  }\n\n  function handleUnauthorised() {\n    axios.get(baseUrl + 'buggy/unauthorised').catch((err) => console.log(err.response));\n  }\n\n  function handleBadGuid() {\n    axios.get(baseUrl + 'activities/notaguid').catch((err) => console.log(err));\n  }\n\n  function handleValidationError() {\n    axios.post(baseUrl + 'activities', {}).catch((err) => setErrors(err));\n  }\n\n  return (\n    <>\n      <Header as=\"h1\" content=\"Test Error component\" />\n      <Segment>\n        <Button.Group widths=\"7\">\n          <Button onClick={handleNotFound} content=\"Not Found\" basic primary />\n          <Button onClick={handleBadRequest} content=\"Bad Request\" basic primary />\n          <Button onClick={handleValidationError} content=\"Validation Error\" basic primary />\n          <Button onClick={handleServerError} content=\"Server Error\" basic primary />\n          <Button onClick={handleUnauthorised} content=\"Unauthorised\" basic primary />\n          <Button onClick={handleBadGuid} content=\"Bad Guid\" basic primary />\n        </Button.Group>\n      </Segment>\n      {errors && <ValidationError errors={errors} />}\n    </>\n  );\n};\n\nexport default TestErrors;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\n\nconst NotFound = () => {\n  return (\n    <Segment placeholder>\n      <Header icon>\n        <Icon name='search' />\n        Oops - we've look everywhere and could not find this.\n      </Header>\n      <Segment.Inline>\n        <Button as={Link} to='activities' primary>\n          Return to activities page\n        </Button>\n      </Segment.Inline>\n    </Segment>\n  );\n};\n\nexport default NotFound;\n","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Container, Header, Segment } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\n\nconst ServerError = () => {\n  const { commonStore } = useStore();\n  const { error } = commonStore;\n  return (\n    <Container>\n      <Header as='h1' content='Server Error' />\n      <Header sub as='h5' color='red' content={error?.message} />\n      {error?.details && (\n        <Segment>\n          <Header as='h4' content='Stack trace' color='teal' />\n          <code style={{ marginTop: '10px' }}>{error.details}</code>\n        </Segment>\n      )}\n    </Container>\n  );\n};\n\nexport default observer(ServerError);\n","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Modal } from 'semantic-ui-react';\nimport { useStore } from '../../stores/store';\n\nconst ModalContainer = () => {\n  const { modalStore } = useStore();\n  const { modal, closeModal } = modalStore;\n  return (\n    <Modal open={modal.open} onClose={closeModal} size='mini'>\n      <Modal.Content>{modal.body}</Modal.Content>\n    </Modal>\n  );\n};\n\nexport default observer(ModalContainer);\n","import React from 'react';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport { observer } from 'mobx-react-lite';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport LoginForm from '../../features/users/LoginForm';\nimport { useStore } from '../stores/store';\nimport { useEffect } from 'react';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\n\nfunction App() {\n  const location = useLocation();\n  const { commonStore, userStore } = useStore();\n  const { token, setAppLoaded, appLoaded } = commonStore;\n  const { getUser } = userStore;\n\n  useEffect(() => {\n    if (token) {\n      getUser().finally(() => setAppLoaded());\n    } else {\n      setAppLoaded();\n    }\n  }, [commonStore, userStore, getUser, setAppLoaded, token]);\n\n  if (!appLoaded) return <LoadingComponent content=\"Loading App ...\" />;\n\n  return (\n    <>\n      <ToastContainer position=\"bottom-right\" hideProgressBar />\n      <ModalContainer />\n      <Route path=\"/\" exact component={HomePage} />\n      <Route\n        //the path below matches anything after /\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <Route exact path=\"/activities\" component={ActivityDashboard} />\n                <Route path=\"/activities/:id\" component={ActivityDetails} />\n                <Route key={location.key} path={['/manage/:id', '/createActivity']} component={ActivityForm} />\n                <Route path=\"/errors\" component={TestErrors} />\n                <Route path=\"/server-error\" component={ServerError} />\n                <Route path=\"/login\" component={LoginForm} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  // <React.StrictMode>\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}